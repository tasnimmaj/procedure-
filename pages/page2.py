"""
Page 2: Proc√©dure G√©n√©r√©e avec RAG

Cette page affiche la proc√©dure g√©n√©r√©e √† partir de la note circulaire saisie ou t√©l√©vers√©e sur la page 1.
Elle utilise un syst√®me de RAG pour trouver des notes similaires et g√©n√©rer une proc√©dure plus pertinente.
"""

import streamlit as st
import os
import sys
import json
from pathlib import Path
import time

# AJOUTER LE R√âPERTOIRE PARENT AU PATH POUR IMPORTER LES MODULES UTILITAIRES
parent_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
if parent_dir not in sys.path:
    sys.path.append(parent_dir)

# IMPORT DES MODULES UTILITAIRES
try:
    from utils.procedure_gen import generate_procedure_with_model, init_vector_store, load_data, find_similar_notes, MODELS
except ImportError as e:
    st.error(f"Erreur d'importation des modules utilitaires: {e}")
    st.warning("Assurez-vous que les modules dans le dossier 'utils' sont correctement install√©s.")

# CONFIGURATION DE LA PAGE
st.set_page_config(
    page_title="Proc√©dure G√©n√©r√©e avec RAG",
    page_icon="üìã",
    layout="wide"
)

# FONCTION POUR SAUVEGARDER LES PROC√âDURES G√âN√âR√âES
def save_procedure(procedure, model_id, note_title, similar_notes=None):
    data_file = Path("data/donnees.json")
    try:
        # Charger les donn√©es existantes
        data = {}
        if data_file.exists():
            with open(data_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
        
        # Si la structure est un dictionnaire avec "dossiers"
        if "dossiers" in data:
            # Trouver le prochain num√©ro de dossier
            next_num = max([d.get("numero", 0) for d in data["dossiers"]], default=0) + 1
            
            # Extraire les √©tapes de la proc√©dure (conversion du tableau markdown)
            procedure_lines = procedure.strip().split('\n')
            etapes = []
            
            # Ignorer les lignes d'en-t√™te et de s√©paration du tableau markdown
            start_parsing = False
            for line in procedure_lines:
                line = line.strip()
                if line.startswith('| ---'):
                    start_parsing = True
                    continue
                
                if start_parsing and line.startswith('|'):
                    # Extraire les donn√©es de chaque colonne
                    cols = [col.strip() for col in line.split('|')[1:-1]]
                    if len(cols) >= 6:  # N¬∞, Activit√©s, Description, Acteurs, Documents, Applications
                        etape = {
                            "N¬∞": cols[0], 
                            "Activit√©s": cols[1],
                            "Description": cols[2],
                            "Acteurs": cols[3],
                            "Documents": cols[4],
                            "Applications": cols[5]
                        }
                        etapes.append(etape)
            
            # Cr√©er un nouveau dossier avec la note et sa proc√©dure
            nouveau_dossier = {
                "numero": next_num,
                "nom": f"Proc√©dure pour {note_title}",
                "note_circulaire": {
                    "texte": st.session_state.get("note_circulaire", "")
                },
                "procedures": [
                    {
                        "numero": f"{next_num}.1",
                        "modele": model_id,
                        "etapes": etapes,
                        "notes_similaires": similar_notes if similar_notes else []  # Ajouter les notes similaires utilis√©es
                    }
                ]
            }
            
            data["dossiers"].append(nouveau_dossier)
        else:
            # Structure alternative (pour r√©trocompatibilit√©)
            if "procedures" not in data:
                data["procedures"] = []
            
            data["procedures"].append({
                "titre": f"Proc√©dure pour {note_title}",
                "contenu": procedure,
                "modele": model_id,
                "note_source": note_title,
                "notes_similaires": similar_notes if similar_notes else []  # Ajouter les notes similaires utilis√©es
            })
        
        # Sauvegarder les donn√©es
        data_file.parent.mkdir(parents=True, exist_ok=True)
        with open(data_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=4, ensure_ascii=False)
        
        return True
    except Exception as e:
        st.error(f"Erreur lors de la sauvegarde de la proc√©dure: {e}")
        return False

# FONCTION POUR G√âN√âRER LA PROC√âDURE AVEC RAG
def generate_procedure_rag(note_circulaire, model_id, api_key=None):
    """G√©n√®re une proc√©dure en utilisant le RAG pour trouver des notes similaires"""
    
    similar_notes_found = []
    similar_notes_info = []
    
    with st.spinner("Recherche de notes circulaires similaires..."):
        # Charger toutes les donn√©es
        all_data = load_data()
        
        # Pr√©parer les documents pour la recherche s√©mantique
        docs = []
        notes_map = {}
        procs_map = {}
        
        # V√©rifier si la structure est celle attendue (dossiers)
        if isinstance(all_data, dict) and "docs" in all_data:
            # Format d√©j√† trait√© par la fonction load_data
            docs = all_data.get("docs", [])
            notes_map = all_data.get("notes_map", {})
            procs_map = all_data.get("procedures_map", {})
            
            # Debug information
            st.write(f"Donn√©es charg√©es: {len(docs)} documents, {len(notes_map)} notes, {len(procs_map)} proc√©dures")
        
        # Si docs est vide, essayer d'extraire les donn√©es d'une autre structure
        if not docs and isinstance(all_data, dict) and "dossiers" in all_data:
            for dossier in all_data.get("dossiers", []):
                num = dossier.get("numero")
                note = dossier.get("note_circulaire", {})
                texte = note.get("texte", "") if isinstance(note, dict) else ""
                
                if texte and num:
                    from langchain.schema import Document
                    docs.append(Document(
                        page_content=texte, 
                        metadata={
                            'numero': num, 
                            'nom': dossier.get('nom', '')
                        }
                    ))
                    notes_map[num] = texte
                    procs_map[num] = dossier.get("procedures", [])
        
        # V√©rifier qu'on a des donn√©es √† traiter
        if not docs:
            st.warning("‚ö†Ô∏è Aucun document trouv√© dans la base de donn√©es pour la recherche RAG.")
            return generate_procedure_with_model(note_circulaire, model_id=model_id, api_key=api_key), []
                
        # Initialiser la base vectorielle
        vectorstore = init_vector_store(docs)
        
        if not vectorstore:
            st.error("‚ùå Erreur lors de l'initialisation de la base vectorielle.")
            return generate_procedure_with_model(note_circulaire, model_id=model_id, api_key=api_key), []
        
        # Rechercher des notes similaires
        similar_notes_found = find_similar_notes(vectorstore, note_circulaire)
        
        # Cr√©er une liste d'infos sur les notes similaires pour la sauvegarde
        for note in similar_notes_found:
            similar_notes_info.append({
                "id": note['id'],
                "titre": note['titre'],
                "score": note.get('score', 0)
            })
        
        # Afficher les r√©sultats de la recherche avec message explicite
        if similar_notes_found and len(similar_notes_found) > 0:
            st.success(f"‚úÖ {len(similar_notes_found)} note(s) circulaire(s) similaire(s) trouv√©e(s) ! Ces notes serviront d'inspiration pour la g√©n√©ration.")
            
            # Afficher un message sp√©cifique pour la premi√®re note la plus similaire
            if len(similar_notes_found) > 0:
                most_similar = similar_notes_found[0]
                score_percent = f"{most_similar.get('score', 0) * 100:.1f}%" if most_similar.get('score') else "N/A"
                
                # Message en √©vidence pour la note la plus similaire
                st.markdown(f"""
                <div style="padding: 15px; background-color: #e6f7ff; border-radius: 5px; border-left: 5px solid #1890ff; margin-bottom: 20px;">
                    <h4 style="margin-top: 0">üîç Note circulaire la plus similaire d√©tect√©e</h4>
                    <p><strong>ID de la note:</strong> {most_similar['id']}</p>
                    <p><strong>Titre:</strong> {most_similar['titre']}</p>
                    <p><strong>Similarit√©:</strong> {score_percent}</p>
                    <p>Cette note sera utilis√©e comme principale source d'inspiration pour la g√©n√©ration de la proc√©dure.</p>
                </div>
                """, unsafe_allow_html=True)
            
            with st.expander("üîç Voir toutes les notes circulaires similaires"):
                for i, note in enumerate(similar_notes_found, 1):
                    score = note.get('score', 0)
                    score_percent = f"{score * 100:.1f}%" if score else "N/A"
                    st.markdown(f"**Note #{i} - ID: {note['id']} - Similarit√©: {score_percent}**")
                    st.markdown(f"**Titre:** {note['titre']}")
                    st.markdown("**Extrait:**")
                    st.text(note['content'][:200] + "..." if len(note['content']) > 200 else note['content'])
                    st.markdown("---")
                    
            st.info("‚öôÔ∏è Le mod√®le va s'inspirer de ces notes pour g√©n√©rer une proc√©dure plus pertinente.")
        else:
            # Message en √©vidence quand aucune note similaire n'est trouv√©e
            st.warning("""
            ‚ö†Ô∏è Aucune note circulaire similaire n'a √©t√© trouv√©e dans la base de donn√©es.
            
            La proc√©dure sera g√©n√©r√©e sans exemple sp√©cifique, uniquement √† partir de la note fournie et des connaissances g√©n√©rales du mod√®le.
            """)
        
        # G√©n√©rer la proc√©dure avec le mod√®le et RAG
        with st.spinner(f"G√©n√©ration de la proc√©dure avec {MODELS[model_id]['name']}..."):
            try:
                # Appeler la fonction de g√©n√©ration de proc√©dure avec les param√®tres appropri√©s
                procedure = generate_procedure_with_model(query=note_circulaire, model_id=model_id, api_key=api_key)
                
                # Enregistrer les infos sur les notes similaires dans l'√©tat de session
                st.session_state.similar_notes = similar_notes_found
                st.session_state.similar_notes_info = similar_notes_info
                
                # Retourner la proc√©dure et les infos des notes similaires
                return procedure, similar_notes_info
            except Exception as e:
                st.error(f"Erreur lors de la g√©n√©ration: {e}")
                return None, []

def extract_procedure_components(procedure_text):
    """Extrait le tableau des √©tapes, le tableau I/O et les sc√©narios de la proc√©dure"""
    if not procedure_text:
        return {"etapes": "", "io": "", "scenarios": "", "scenarios_ok": "", "scenarios_ko": ""}
    
    # Initialiser les composants
    components = {
        "etapes": "",
        "io": "",
        "scenarios": "",
        "scenarios_ok": "",
        "scenarios_ko": ""
    }
    
    # Extraire les sections par analyse ligne par ligne
    current_section = []
    current_section_type = None
    
    lines = procedure_text.split("\n")
    i = 0
    while i < len(lines):
        line = lines[i].strip()
        
        # D√©tecter le d√©but du tableau des √©tapes
        if "| N¬∞" in line or "| No." in line or "| Num√©ro" in line:
            if current_section_type and current_section:
                components[current_section_type] = "\n".join(current_section)
            
            current_section = [line]
            current_section_type = "etapes"
            i += 1
            continue
            
        # D√©tecter le d√©but du tableau I/O
        if ("| Ev√®nement" in line or "| √âv√©nement" in line or "| Entr√©e" in line) and "| Sortie" in line:
            if current_section_type and current_section:
                components[current_section_type] = "\n".join(current_section)
            
            current_section = [line]
            current_section_type = "io"
            i += 1
            continue
            
        # D√©tecter le d√©but des sc√©narios g√©n√©raux
        if ("# Sc√©narios" in line or "## Sc√©narios" in line) and not "OK" in line and not "KO" in line:
            if current_section_type and current_section:
                components[current_section_type] = "\n".join(current_section)
            
            current_section = [line]
            current_section_type = "scenarios"
            i += 1
            continue
            
        # D√©tecter le d√©but des sc√©narios OK
        if ("# Sc√©nario OK" in line or "## Sc√©nario OK" in line or 
            "# Sc√©narios OK" in line or "## Sc√©narios OK" in line or
            "# Sc√©nario nominal" in line or "## Sc√©nario nominal" in line):
            if current_section_type and current_section:
                components[current_section_type] = "\n".join(current_section)
            
            current_section = [line]
            current_section_type = "scenarios_ok"
            i += 1
            continue
            
        # D√©tecter le d√©but des sc√©narios KO
        if ("# Sc√©nario KO" in line or "## Sc√©nario KO" in line or 
            "# Sc√©narios KO" in line or "## Sc√©narios KO" in line or
            "# Sc√©nario alternatif" in line or "## Sc√©nario alternatif" in line):
            if current_section_type and current_section:
                components[current_section_type] = "\n".join(current_section)
            
            current_section = [line]
            current_section_type = "scenarios_ko"
            i += 1
            continue
        
        # Si on est dans une section identifi√©e, ajouter la ligne
        if current_section_type:
            # Si on trouve un titre qui pourrait indiquer le d√©but d'une nouvelle section
            if (line.startswith("## ") or line.startswith("# ")) and len(current_section) > 0:
                # V√©rifier si c'est une section que nous traitons sp√©cifiquement
                if "Entr√©es/Sorties" in line or "I/O" in line:
                    # Sauvegarder la section pr√©c√©dente
                    if current_section_type and current_section:
                        components[current_section_type] = "\n".join(current_section)
                    # Commencer la nouvelle section I/O
                    current_section = [line]
                    current_section_type = "io"
                elif "Sc√©nario" in line and "OK" in line or "nominal" in line:
                    # Sauvegarder la section pr√©c√©dente
                    if current_section_type and current_section:
                        components[current_section_type] = "\n".join(current_section)
                    # Commencer la nouvelle section sc√©narios OK
                    current_section = [line]
                    current_section_type = "scenarios_ok"
                elif "Sc√©nario" in line and "KO" in line or "alternatif" in line:
                    # Sauvegarder la section pr√©c√©dente
                    if current_section_type and current_section:
                        components[current_section_type] = "\n".join(current_section)
                    # Commencer la nouvelle section sc√©narios KO
                    current_section = [line]
                    current_section_type = "scenarios_ko"
                elif "Sc√©narios" in line and not "OK" in line and not "KO" in line:
                    # Sauvegarder la section pr√©c√©dente
                    if current_section_type and current_section:
                        components[current_section_type] = "\n".join(current_section)
                    # Commencer la nouvelle section sc√©narios g√©n√©raux
                    current_section = [line]
                    current_section_type = "scenarios"
                else:
                    # C'est un autre type de titre dans la section courante
                    current_section.append(line)
            else:
                # Ajouter la ligne √† la section courante
                current_section.append(line)
        else:
            # Si on n'est pas encore dans une section identifi√©e mais qu'on trouve un titre pertinent
            if line.startswith("# ") or line.startswith("## "):
                if "√âtapes" in line or "Etapes" in line or "Proc√©dure" in line:
                    current_section = [line]
                    current_section_type = "etapes"
                elif "Entr√©es/Sorties" in line or "I/O" in line:
                    current_section = [line]
                    current_section_type = "io"
                elif "Sc√©nario" in line and "OK" in line:
                    current_section = [line]
                    current_section_type = "scenarios_ok"
                elif "Sc√©nario" in line and "KO" in line:
                    current_section = [line]
                    current_section_type = "scenarios_ko"
                elif "Sc√©narios" in line:
                    current_section = [line]
                    current_section_type = "scenarios"
        
        i += 1
    
    # Sauvegarder la derni√®re section
    if current_section_type and current_section:
        components[current_section_type] = "\n".join(current_section)
    
    # S'assurer que le tableau des √©tapes a un format coh√©rent
    if components["etapes"] and "| " in components["etapes"] and not "| ---" in components["etapes"]:
        lines = components["etapes"].split("\n")
        header_line_index = -1
        
        # Trouver la ligne d'en-t√™te du tableau
        for idx, line in enumerate(lines):
            if "| N¬∞" in line or "| No." in line or "| Num√©ro" in line:
                header_line_index = idx
                break
        
        if header_line_index >= 0:
            header_line = lines[header_line_index]
            # Compter le nombre de colonnes
            num_columns = header_line.count("|") - 1
            separator_line = "| " + " --- |" * num_columns
            
            # Ins√©rer la ligne de s√©paration apr√®s l'en-t√™te
            lines.insert(header_line_index + 1, separator_line)
            components["etapes"] = "\n".join(lines)
    
    # S'assurer que le tableau I/O a un format coh√©rent
    if components["io"] and "| " in components["io"] and not "| ---" in components["io"]:
        lines = components["io"].split("\n")
        header_line_index = -1
        
        # Trouver la ligne d'en-t√™te du tableau
        for idx, line in enumerate(lines):
            if ("| Ev√®nement" in line or "| √âv√©nement" in line or "| Entr√©e" in line) and "| Sortie" in line:
                header_line_index = idx
                break
        
        if header_line_index >= 0:
            header_line = lines[header_line_index]
            # Compter le nombre de colonnes
            num_columns = header_line.count("|") - 1
            separator_line = "| " + " --- |" * num_columns
            
            # Ins√©rer la ligne de s√©paration apr√®s l'en-t√™te
            lines.insert(header_line_index + 1, separator_line)
            components["io"] = "\n".join(lines)
    
    return components

# AFFICHAGE DE LA PAGE
def main():
    st.title("üîÑ Proc√©dure G√©n√©r√©e avec RAG")
    
    # R√©cup√©rer la cl√© API Groq si d√©finie dans les variables d'environnement
    api_key = os.getenv("GROQ_API_KEY")
    
    # V√©rifier la pr√©sence de la note circulaire
    if not st.session_state.get("note_circulaire"):
        st.warning(
            "‚ö†Ô∏è Aucune note circulaire n'est disponible. Veuillez d'abord saisir ou t√©l√©verser une note dans la page 1."
        )
        st.markdown("[Retour √† la page d'entr√©e de note circulaire](/)")
        return

    # R√©cup√©rer le mod√®le choisi dans la page 1
    model_selected = st.session_state.get("model_selected", "mistral-saba-24b")  # Valeur par d√©faut

    # Affichage du contenu de la note
    note_content = st.session_state.get("note_circulaire", "")
    note_title = st.session_state.get("note_title", "Note sans titre")
    with st.expander("üìÑ Voir la note circulaire source"):
        st.subheader(note_title)
        st.write(note_content)
    
    # Si aucune proc√©dure n'a encore √©t√© g√©n√©r√©e, proposer de le faire
    if not st.session_state.get("procedure_generee"):
        st.subheader("ü§ñ G√©n√©ration de la proc√©dure")
        st.info(f"""
        Le mod√®le s√©lectionn√© est: **{MODELS[model_selected]['name']}**  
        Description: {MODELS[model_selected]['description']}
        """)
        
        # Optionnellement, permettre de fournir une cl√© API
        if not api_key:
            api_key = st.text_input("Cl√© API Groq (optionnelle):", type="password")
        
        # Bouton pour g√©n√©rer la proc√©dure avec le mod√®le choisi en page 1
        if st.button("üöÄ G√©n√©rer la proc√©dure avec RAG", use_container_width=True):
            procedure, similar_notes_info = generate_procedure_rag(note_content, model_selected, api_key)
            if procedure:
                st.session_state.procedure_generee = procedure
                st.session_state.procedure_model = model_selected
                st.session_state.similar_notes_info = similar_notes_info
                
                # Sauvegarder la proc√©dure g√©n√©r√©e
                success = save_procedure(procedure, model_selected, note_title, similar_notes_info)
                if success:
                    st.success("‚úÖ Proc√©dure g√©n√©r√©e et sauvegard√©e avec succ√®s!")
                
                # Forcer le rafra√Æchissement de la page pour afficher les r√©sultats
                st.rerun()

    # Affichage de la proc√©dure g√©n√©r√©e (si disponible)
    if st.session_state.get("procedure_generee"):
        st.subheader("üìã Proc√©dure G√©n√©r√©e")
        model_used = st.session_state.get("procedure_model", model_selected)
        
        # Afficher les informations sur la m√©thode de g√©n√©ration
        similar_notes = st.session_state.get("similar_notes", [])
        similar_notes_info = st.session_state.get("similar_notes_info", [])
        
        if similar_notes and len(similar_notes) > 0:
            st.success(f"‚úÖ Proc√©dure g√©n√©r√©e avec l'aide de {len(similar_notes)} note(s) similaire(s)")
            st.caption(f"G√©n√©r√©e avec le mod√®le: {MODELS[model_used]['name']} assist√© par RAG")
            
            # Afficher la liste des IDs des notes similaires utilis√©es
            if similar_notes_info and len(similar_notes_info) > 0:
                ids_list = ", ".join([f"ID {note['id']}" for note in similar_notes_info])
                st.markdown(f"**Notes utilis√©es comme inspiration:** {ids_list}")
            
            # Badge pour indiquer le mode de g√©n√©ration
            st.markdown("""
            <div style="background-color:#0066cc; color:white; padding:8px; border-radius:5px; display:inline-block; margin-bottom:15px">
            <span style="font-weight:bold">üîÑ G√©n√©ration assist√©e par RAG</span>
            </div>
            """, unsafe_allow_html=True)
        else:
            st.caption(f"G√©n√©r√©e avec le mod√®le: {MODELS[model_used]['name']} sans exemples similaires")
            
            # Badge pour indiquer le mode de g√©n√©ration
            st.markdown("""
            <div style="background-color:#f39c12; color:white; padding:8px; border-radius:5px; display:inline-block; margin-bottom:15px">
            <span style="font-weight:bold">ü§î G√©n√©ration sans exemples similaires</span>
            </div>
            """, unsafe_allow_html=True)
        
        # Extraire les composants de la proc√©dure
        procedure_components = extract_procedure_components(st.session_state.procedure_generee)
          # Afficher le tableau des √©tapes
        st.subheader("üìã Tableau des √âtapes")
        if procedure_components["etapes"]:
            st.markdown(procedure_components["etapes"])
        else:
            st.info("Aucun tableau des √©tapes d√©tect√© dans la proc√©dure g√©n√©r√©e.")
        
        # Afficher le tableau I/O (obligatoire)
        st.subheader("üîÑ Tableau des Entr√©es/Sorties")
        if procedure_components["io"] and "| Entr√©e |" in procedure_components["io"] and "| Sortie |" in procedure_components["io"]:
            st.markdown(procedure_components["io"])
        else:
            default_io = """| Ev√®nement | Processus en interface | Description du processus en interface |
| --- | --- | --- |
| Entr√©e | R√©ception de la note circulaire | D√©clenchement du processus suite √† une nouvelle note circulaire |
| Sortie | Application de la note | Mise en place effective des directives de la note circulaire |"""
            st.markdown(default_io)
              # Section des sc√©narios (obligatoire)
        st.subheader("üìù Sc√©narios de validation")
        
        # Afficher les sc√©narios OK/KO s'ils existent
        if procedure_components["scenarios_ok"] and procedure_components["scenarios_ok"].strip():
            st.markdown("### ‚úÖ Sc√©nario OK / Nominal")
            st.markdown(procedure_components["scenarios_ok"])
        else:
            st.markdown("### ‚úÖ Sc√©nario OK / Nominal")
            st.markdown("""
            1. **Validation compl√®te de la proc√©dure**
               - Tous les crit√®res de la note circulaire sont respect√©s
               - Les documents requis sont complets et valides
               - Les validations sont obtenues dans les d√©lais impartis
               - Le processus respecte toutes les √©tapes d√©finies
               - L'archivage est effectu√© selon les normes""")
        
        if procedure_components["scenarios_ko"] and procedure_components["scenarios_ko"].strip():
            st.markdown("### ‚ùå Sc√©nario KO / Alternatif")
            st.markdown(procedure_components["scenarios_ko"])
        else:
            st.markdown("### ‚ùå Sc√©nario KO / Alternatif")
            st.markdown("""
            1. **Non-validation de la proc√©dure**
               - Non-respect d'un ou plusieurs crit√®res essentiels
               - Documents manquants ou non conformes aux exigences
               - D√©lais de validation d√©pass√©s
               - Processus bloqu√© n√©cessitant une intervention
               - Non-respect des r√®gles d'archivage""")

        # Options de navigation et t√©l√©chargement
        c1, c2, c3 = st.columns(3)
        with c1:
            if st.button("üìä Voir le Logigramme", use_container_width=True):
                st.session_state.redirect_to_page3 = True
                st.query_params.update({"page": "3"})
        with c2:
            if st.button("üí¨ Poser des Questions", use_container_width=True):
                st.session_state.redirect_to_page4 = True
                st.query_params.update({"page": "4"})
        with c3:
            procedure_md = st.session_state.procedure_generee
            st.download_button(
                label="‚¨áÔ∏è T√©l√©charger (MD)",
                data=procedure_md,
                file_name=f"procedure_{note_title.replace(' ', '_')}.md",
                mime="text/markdown",
                use_container_width=True
            )

    # D√©tails techniques du mod√®le et du RAG
    if st.session_state.get("procedure_generee"):
        with st.expander("üîç D√©tails techniques du syst√®me RAG"):
            # Information sur les notes similaires utilis√©es
            similar_notes = st.session_state.get("similar_notes", [])
            if similar_notes and len(similar_notes) > 0:
                st.markdown("### üìë Notes circulaires similaires utilis√©es")
                for i, note in enumerate(similar_notes, 1):
                    score = note.get('score', 0)
                    score_percent = f"{score * 100:.1f}%" if score else "N/A"
                    st.markdown(f"**Note #{i} - ID: {note['id']} - Similarit√©: {score_percent}**")
                    st.markdown(f"**Titre:** {note['titre']}")
                    with st.expander(f"Voir le contenu de la note #{i}"):
                        st.text(note['content'])
            else:
                st.warning("‚ö†Ô∏è Aucune note circulaire similaire n'a √©t√© utilis√©e pour cette g√©n√©ration.")
            
            st.markdown("""
            ### üß† Syst√®me de RAG (Retrieval-Augmented Generation)
            
            Le processus de g√©n√©ration de proc√©dure utilise le syst√®me RAG pour:
            1. **Recherche s√©mantique** - Trouver des notes circulaires similaires dans la base de donn√©es
            2. **S√©lection des exemples** - Choisir les proc√©dures associ√©es les plus pertinentes
            3. **Contexte enrichi** - Fournir ces exemples au mod√®le pour guider la g√©n√©ration
            4. **G√©n√©ration am√©lior√©e** - Produire une proc√©dure en s'inspirant des exemples tout en respectant le contenu sp√©cifique de la note circulaire
            
            Ce processus permet d'obtenir des proc√©dures plus pertinentes et coh√©rentes avec les standards existants.
            """)
            
            model_used = st.session_state.get("procedure_model", model_selected)
            st.markdown(f"**Mod√®le**: {MODELS[model_used]['name']}")
            st.markdown(f"**Fournisseur**: {MODELS[model_used]['provider']}")
            st.markdown(f"**Temp√©rature**: {MODELS[model_used]['temperature']}")

if __name__ == "__main__":
    main()