# -*- coding: utf-8 -*-
"""
Page 3: G√©n√©ration de Logigramme

Cette page g√©n√®re un logigramme bas√© sur la proc√©dure g√©n√©r√©e pr√©c√©demment.
"""

import streamlit as st
import json
import sys
from pathlib import Path
import graphviz

# AJOUTER LE R√âPERTOIRE PARENT AU PATH POUR IMPORTER LES MODULES UTILS
parent_dir = Path(__file__).resolve().parent.parent
if str(parent_dir) not in sys.path:
    sys.path.append(str(parent_dir))

# IMPORT DES FONCTIONS UTILITAIRES
try:
    from utils.diagram_gen import extract_steps_from_procedure, generate_flowchart
except ImportError as e:
    st.error(f"Erreur d'importation des modules utilitaires: {e}")
    st.warning("Assurez-vous que les modules dans le dossier 'utils' sont correctement install√©s.")

# CONFIGURATION DE LA PAGE
st.set_page_config(
    page_title="Logigramme",
    page_icon="üìä",
    layout="wide"
)

# FONCTION CHARGEMENT DE LA DERNI√àRE PROC√âDURE

def load_last_procedure():
    data_path = parent_dir / "data" / "donnees.json"
    if data_path.exists():
        try:
            with open(data_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            if data.get("procedures"):
                # On r√©cup√®re le dernier contenu
                return data["procedures"][-1].get("contenu", "")
        except Exception as e:
            st.error(f"Erreur lors du chargement des donn√©es: {e}")
    return ""

# MAIN

def main():
    st.title("Visualisation du Logigramme")
    st.write("Cette page affiche un logigramme g√©n√©r√© √† partir de la proc√©dure.")

    # Initialisation de la proc√©dure dans la session
    if 'procedure_text' not in st.session_state:
        st.session_state['procedure_text'] = load_last_procedure()

    # √âdition manuelle si n√©cessaire
    with st.expander("Modifier ou entrer manuellement la proc√©dure"):
        proc = st.text_area(
            "Texte de la proc√©dure",
            value=st.session_state['procedure_text'],
            height=300
        )
        if st.button("Mettre √† jour la proc√©dure"):
            st.session_state['procedure_text'] = proc
            st.success("Proc√©dure mise √† jour avec succ√®s!")

    procedure_text = st.session_state.get('procedure_text', '')
    if procedure_text:
        try:
            # Extraction des √©tapes (Graphviz)
            steps = extract_steps_from_procedure(procedure_text)
            if steps:
                # G√©n√©ration du logigramme Graphviz
                graph = generate_flowchart(steps)
                st.graphviz_chart(graph)

                # G√©n√©ration du logigramme matplotlib inspir√© du code fourni
                from utils.diagram_gen import extract_activities_and_actors, draw_flowchart_matplotlib
                activities, actors = extract_activities_and_actors(procedure_text)
                if activities and actors:
                    st.subheader("Logigramme (vue alternative)")
                    fig = draw_flowchart_matplotlib(activities, actors)
                    st.pyplot(fig)

                # Bouton de t√©l√©chargement
                dot_source = graph.source
                st.download_button(
                    label="T√©l√©charger le logigramme (DOT)",
                    data=dot_source,
                    file_name="logigramme.dot",
                    mime="text/plain",
                    use_container_width=True
                )
            else:
                st.warning("Aucune √©tape n'a pu √™tre extraite de la proc√©dure. Veuillez v√©rifier le format.")
        except Exception as e:
            st.error(f"Erreur lors de la g√©n√©ration du logigramme: {e}")
    else:
        st.info("Veuillez d'abord g√©n√©rer une proc√©dure dans la page pr√©c√©dente ou entrer manuellement une proc√©dure ci-dessus.")

if __name__ == "__main__":
    main()
