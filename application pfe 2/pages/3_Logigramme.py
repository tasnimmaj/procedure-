""" Page 3: G√©n√©ration de Logigramme avec styles partag√©s
Cette page g√©n√®re un logigramme bas√© sur le tableau Markdown cr√©√© dans la page 2.
Elle utilise Graphviz pour transformer le tableau en repr√©sentation visuelle.
"""

import streamlit as st
from utils.logigramme_advanced import generate_flowchart
from utils.styles import apply_green_theme, set_page_config  # Import du fichier de styles
import base64

# Configuration de la page avec fonction partag√©e
set_page_config("Logigramme", "üìä")

# Application du th√®me vert
apply_green_theme()

def main():
    st.title("üìä G√©n√©rateur de Logigramme")
    
    # R√©cup√©rer le nom de la proc√©dure de la session
    procedure_name = st.session_state.get('procedure_name', "Nouvelle proc√©dure")
    
    # Interface utilisateur
    procedure_name = st.text_input("Nom de la proc√©dure:", procedure_name)
    st.session_state.procedure_name = procedure_name 
    
    # R√©cup√©rer le tableau source
    if 'procedure_generee' in st.session_state:
        markdown_text = st.session_state.get('procedure_generee', '')
        
        # Extraire uniquement le tableau des √©tapes
        tableau_etapes = ""
        capture = False
        for line in markdown_text.split("\n"):
            if "| N¬∞" in line or "| No" in line:
                capture = True
            if capture and line.strip():
                if "Entr√©es/Sorties" in line or "# " in line:
                    break
                tableau_etapes += line + "\n"
        
        markdown_text = tableau_etapes
    else:
        markdown_text = ""
 
    # Afficher le tableau Markdown source si n√©cessaire
    if st.checkbox("üìã Afficher le tableau source de la proc√©dure"):
        st.text_area("Tableau Markdown", markdown_text, height=200)
    
    # G√©n√©rer le logigramme
    try:
        if markdown_text:
            st.subheader("Logigramme g√©n√©r√©")
            
            # G√©n√©rer le diagramme
            flowchart_base64, error = generate_flowchart(markdown_text, procedure_name)
            
            if flowchart_base64 and not error:
                # Afficher l'image
                st.image(f"data:image/png;base64,{flowchart_base64}")
                
                # Option de t√©l√©chargement en PNG
                st.download_button(
                    label="üì• T√©l√©charger en PNG",
                    data=base64.b64decode(flowchart_base64),
                    file_name="logigramme.png",
                    mime="image/png"
                )
            else:
                st.warning(f"‚ö†Ô∏è {error or 'Impossible de g√©n√©rer le logigramme. V√©rifiez le format du tableau.'}")
        else:
            st.info("‚ÑπÔ∏è Aucun tableau de proc√©dure n'a √©t√© fourni. Veuillez d'abord cr√©er une proc√©dure dans l'onglet pr√©c√©dent.")
    
    except Exception as e:
        st.error(f"‚ùå Erreur lors de la g√©n√©ration du logigramme: {str(e)}")
        st.exception(e)
    
    # Informations suppl√©mentaires
    with st.expander("‚ÑπÔ∏è Informations sur les logigrammes"):
        st.markdown("""
        ### Qu'est-ce qu'un logigramme?
        
        Un logigramme est une repr√©sentation graphique d'un processus ou d'une proc√©dure, qui montre la s√©quence des activit√©s et les acteurs impliqu√©s.
        
        ### Caract√©ristiques des logigrammes g√©n√©r√©s:
        
        * D√©but et fin repr√©sent√©s par des ovales color√©s
        * Actions repr√©sent√©es par des rectangles verts
        * D√©cisions repr√©sent√©es par des losanges jaunes
        * Identification claire des acteurs pour chaque √©tape
        * Num√©rotation des √©tapes pour suivre facilement le processus
        """)

if __name__ == "__main__":
    main()